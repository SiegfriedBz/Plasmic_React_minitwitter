// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4Xo3X5xY4CsyvaPydpDvvc
// Component: dveX1bKk7PESJ
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import Post from "../../Post"; // plasmic-import: wDxrFo6awIDnO/component
import Fab from "../../Fab"; // plasmic-import: exM25N8BAtqsl/component
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_copy_of_minitwitter.module.css"; // plasmic-import: 4Xo3X5xY4CsyvaPydpDvvc/projectcss
import sty from "./PlasmicFeed.module.css"; // plasmic-import: dveX1bKk7PESJ/css

export const PlasmicFeed__VariantProps = new Array();

export const PlasmicFeed__ArgProps = new Array();

function PlasmicFeed__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = args;
  return (
    <React.Fragment>
      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <div
            data-plasmic-name={"text"}
            data-plasmic-override={overrides.text}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text
            )}
          >
            {"Minitwitter"}
          </div>

          <div
            data-plasmic-name={"freeBox"}
            data-plasmic-override={overrides.freeBox}
            className={classNames(projectcss.all, sty.freeBox)}
          >
            <p.Stack
              as={"div"}
              data-plasmic-name={"postList"}
              data-plasmic-override={overrides.postList}
              hasGap={true}
              className={classNames(projectcss.all, sty.postList)}
            >
              <Post
                className={classNames("__wab_instance", sty.post___74Nwv)}
                timestamp={"1 hour ago"}
              >
                {"What state management framework do you use for React?"}
              </Post>

              <Post
                className={classNames("__wab_instance", sty.post__t3JMe)}
                timestamp={"2 hours ago"}
              >
                {"Hello world!"}
              </Post>

              <Post
                className={classNames("__wab_instance", sty.post__mqrdz)}
                timestamp={"3 hours ago"}
              >
                {"What state management framework do you use for React?"}
              </Post>
            </p.Stack>

            <Fab
              data-plasmic-name={"addButton"}
              data-plasmic-override={overrides.addButton}
              className={classNames("__wab_instance", sty.addButton)}
            />
          </div>
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: ["root", "text", "freeBox", "postList", "addButton"],
  text: ["text"],
  freeBox: ["freeBox", "postList", "addButton"],
  postList: ["postList"],
  addButton: ["addButton"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicFeed__ArgProps,
          internalVariantPropNames: PlasmicFeed__VariantProps
        }),

      [props, nodeName]
    );

    return PlasmicFeed__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicFeed";
  } else {
    func.displayName = `PlasmicFeed.${nodeName}`;
  }
  return func;
}

export const PlasmicFeed = Object.assign(
  // Top-level PlasmicFeed renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    text: makeNodeComponent("text"),
    freeBox: makeNodeComponent("freeBox"),
    postList: makeNodeComponent("postList"),
    addButton: makeNodeComponent("addButton"),
    // Metadata about props expected for PlasmicFeed
    internalVariantProps: PlasmicFeed__VariantProps,
    internalArgProps: PlasmicFeed__ArgProps
  }
);

export default PlasmicFeed;
/* prettier-ignore-end */
