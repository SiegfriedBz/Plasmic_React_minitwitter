// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4Xo3X5xY4CsyvaPydpDvvc
// Component: wDxrFo6awIDnO
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_copy_of_minitwitter.module.css"; // plasmic-import: 4Xo3X5xY4CsyvaPydpDvvc/projectcss
import sty from "./PlasmicPost.module.css"; // plasmic-import: wDxrFo6awIDnO/css
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: evH91F7p7DW6J/icon

export const PlasmicPost__VariantProps = new Array("state");

export const PlasmicPost__ArgProps = new Array("children", "timestamp");

function PlasmicPost__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = args;
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root,
        { [sty.rootstate_liked]: hasVariant(variants, "state", "liked") }
      )}
    >
      <div className={classNames(projectcss.all, sty.freeBox__mkOtr)}>
        {p.renderPlasmicSlot({
          defaultContents:
            "What state management framework do you use for React?",
          value: args.children,
          className: classNames(sty.slotTargetChildren, {
            [sty.slotTargetChildrenstate_liked]: hasVariant(
              variants,
              "state",
              "liked"
            )
          })
        })}
      </div>

      <div className={classNames(projectcss.all, sty.freeBox__cjvWe)}>
        {p.renderPlasmicSlot({
          defaultContents: "1 hour ago",
          value: args.timestamp,
          className: classNames(sty.slotTargetTimestamp)
        })}
      </div>

      {(hasVariant(variants, "state", "liked") ? true : false) ? (
        <IconIcon
          data-plasmic-name={"svg"}
          data-plasmic-override={overrides.svg}
          className={classNames(projectcss.all, sty.svg, {
            [sty.svgstate_liked]: hasVariant(variants, "state", "liked")
          })}
          role={"img"}
        />
      ) : null}
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root", "svg"],
  svg: ["svg"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicPost__ArgProps,
          internalVariantPropNames: PlasmicPost__VariantProps
        }),

      [props, nodeName]
    );

    return PlasmicPost__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicPost";
  } else {
    func.displayName = `PlasmicPost.${nodeName}`;
  }
  return func;
}

export const PlasmicPost = Object.assign(
  // Top-level PlasmicPost renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    svg: makeNodeComponent("svg"),
    // Metadata about props expected for PlasmicPost
    internalVariantProps: PlasmicPost__VariantProps,
    internalArgProps: PlasmicPost__ArgProps
  }
);

export default PlasmicPost;
/* prettier-ignore-end */
