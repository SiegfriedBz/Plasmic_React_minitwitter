// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4Xo3X5xY4CsyvaPydpDvvc
// Component: Wfhaa0RfAZ8dR
import * as React from "react";
import * as ph from "@plasmicapp/host";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import Button from "../../Button"; // plasmic-import: D6rlqCVdDc5ck/component
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_copy_of_minitwitter.module.css"; // plasmic-import: 4Xo3X5xY4CsyvaPydpDvvc/projectcss
import sty from "./PlasmicNewPost.module.css"; // plasmic-import: Wfhaa0RfAZ8dR/css

export const PlasmicNewPost__VariantProps = new Array();

export const PlasmicNewPost__ArgProps = new Array();

function PlasmicNewPost__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = args;
  return (
    <React.Fragment>
      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <div
            data-plasmic-name={"text"}
            data-plasmic-override={overrides.text}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text
            )}
          >
            {"Minitwitter"}
          </div>

          <div className={classNames(projectcss.all, sty.freeBox__ivHL)}>
            <div className={classNames(projectcss.all, sty.freeBox__mMlY)}>
              <div className={classNames(projectcss.all, sty.freeBox___7JCsO)}>
                <textarea
                  data-plasmic-name={"postContent"}
                  data-plasmic-override={overrides.postContent}
                  className={classNames(
                    projectcss.all,
                    projectcss.textarea,
                    sty.postContent
                  )}
                  placeholder={"What's on your mind?"}
                />
              </div>

              <Button
                data-plasmic-name={"postButton"}
                data-plasmic-override={overrides.postButton}
                className={classNames("__wab_instance", sty.postButton)}
              />
            </div>
          </div>
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: ["root", "text", "postContent", "postButton"],
  text: ["text"],
  postContent: ["postContent"],
  postButton: ["postButton"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicNewPost__ArgProps,
          internalVariantPropNames: PlasmicNewPost__VariantProps
        }),

      [props, nodeName]
    );

    return PlasmicNewPost__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicNewPost";
  } else {
    func.displayName = `PlasmicNewPost.${nodeName}`;
  }
  return func;
}

export const PlasmicNewPost = Object.assign(
  // Top-level PlasmicNewPost renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    text: makeNodeComponent("text"),
    postContent: makeNodeComponent("postContent"),
    postButton: makeNodeComponent("postButton"),
    // Metadata about props expected for PlasmicNewPost
    internalVariantProps: PlasmicNewPost__VariantProps,
    internalArgProps: PlasmicNewPost__ArgProps
  }
);

export default PlasmicNewPost;
/* prettier-ignore-end */
